generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id           Int      @id @default(autoincrement())
  chName       String   @unique @map("ch_name") @db.VarChar(64)
  enName       String   @unique @map("en_name") @db.VarChar(64)
  localName    String   @map("local_name") @db.VarChar(256)
  currencyCode String   @map("currency_code") @db.VarChar(3)
  code         String   @unique @db.VarChar(3)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  users        User[]

  @@map("countries")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique @db.VarChar(64)
  name        String       @db.VarChar(64)
  avatar      String?
  countryId   Int          @map("country_id")
  gender      String       @db.VarChar(8)
  password    String       @db.VarChar(64)
  googleId    String?      @unique @map("google_id")
  isVerified  Boolean      @default(false) @map("is_verified")
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  mails       Mail[]
  tripMembers TripMember[]
  trips       Trip[]
  country     Country      @relation(fields: [countryId], references: [id])

  @@map("users")
}

model Mail {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String   @db.VarChar(64)
  subject   String   @db.VarChar(256)
  html      String
  code      String?  @db.VarChar(256)
  isUsed    Boolean  @default(false) @map("is_used")
  expiresAt DateTime @default(now()) @map("expires_at") @db.Timestamp(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id])

  @@map("mails")
}

model Currency {
  id           Int      @id @default(autoincrement())
  code         String   @unique @db.VarChar(3)
  exchangeRate Decimal  @default(1.000000) @map("exchange_rate") @db.Decimal(12, 6)
  baseCurrency Boolean  @default(false) @map("base_currency")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("currencies")
}

model Trip {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(200)
  description  String
  coverUrl     String?      @map("cover_url")
  creatorId    Int          @map("creator_id")
  currencyCode String       @map("currency_code") @db.VarChar(3)
  startTime    DateTime     @map("start_time") @db.Timestamp(0)
  endTime      DateTime     @map("end_time") @db.Timestamp(0)
  isDeleted    Boolean      @default(false) @map("is_deleted")
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  
  places       Place[]
  tripMembers  TripMember[]
  creator      User         @relation(fields: [creatorId], references: [id])

  @@map("trips")
}

model TripMember {
  id            Int            @id @default(autoincrement())
  userId        Int            @map("user_id")
  tripId        Int            @map("trip_id")
  nickname      String         @db.VarChar(64)
  permissions   Int            @default(1)
  description   Json?
  note          String?
  isDeleted     Boolean        @default(false) @map("is_deleted")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  checkLists    CheckList[]
  placeComments PlaceComment[]
  reservations  Reservation[]
  trip          Trip           @relation(fields: [tripId], references: [id])
  user          User           @relation(fields: [userId], references: [id])

  @@map("trip_members")
}

model CheckList {
  id           Int        @id @default(autoincrement())
  tripMemberId Int        @map("trip_member_id")
  title        String     @db.VarChar(32)
  type         String     @db.VarChar(32)
  description  Json?
  isPublic     Boolean    @default(true) @map("is_public")
  isDeleted    Boolean    @default(false) @map("is_deleted")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  tripMember   TripMember @relation(fields: [tripMemberId], references: [id])

  @@map("check_lists")
}

model Place {
  id            Int            @id @default(autoincrement())
  tripId        Int            @map("trip_id")
  googleMapUrl  String?        @map("google_map_url") @db.VarChar(500)
  googlePlaceId String?        @map("google_place_id") @db.VarChar(50)
  address       String?        @db.VarChar(250)
  locationLat   Decimal        @map("location_lat") @db.Decimal(10, 7)
  locationLng   Decimal        @map("location_lng") @db.Decimal(11, 7)
  name          String         @db.VarChar(250)
  weekdayText   String[]       @map("weekday_text")
  type          String?        @db.VarChar(50)
  rating        Decimal?       @db.Decimal(2, 1)
  duration      Int?
  cost          Decimal?       @db.Decimal(10, 2)
  icon          String?        @default("flag") @db.VarChar(50)
  isDeleted     Boolean        @default(false) @map("is_deleted")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  
  placeComments PlaceComment[]
  trip          Trip           @relation(fields: [tripId], references: [id])
  reservations  Reservation[]
  placeDurations PlaceDuration[]


  @@map("places")
}

model PlaceComment {
  id           Int        @id @default(autoincrement())
  placeId      Int        @map("place_id")
  tripMemberId Int        @map("trip_member_id")
  rating       Int?
  comment      String?    @db.VarChar(255)
  isDeleted    Boolean    @default(false) @map("is_deleted")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  place        Place      @relation(fields: [placeId], references: [id])
  tripMember   TripMember @relation(fields: [tripMemberId], references: [id])

  @@map("place_comments")
}

model Reservation {
  id              Int        @id @default(autoincrement())
  title           String     @db.VarChar(100)
  type            String     @db.VarChar(50)
  reservationTime DateTime   @map("reservation_time")
  endTime         DateTime?  @map("end_time")
  placeId         Int?       @map("place_id")
  tripMemberId    Int        @map("trip_member_id")
  amount          Int
  note            String?
  description     String?
  isDeleted       Boolean    @default(false) @map("is_deleted")
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  place           Place?     @relation(fields: [placeId], references: [id])
  tripMember      TripMember @relation(fields: [tripMemberId], references: [id])

  @@map("reservations")
}


model PlaceDuration {
  id            Int       @id @default(autoincrement())
  placeId       Int       @map("place_id")
  date          DateTime  @db.Date
  col           Int[]     // [a, b] where a <= b <= 144, 1 = 10 minutes
  row           Int
  groupNumber   Int?      @map("group_number")
  isDeleted     Boolean   @default(false) @map("is_deleted")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  place         Place     @relation(fields: [placeId], references: [id])

  routesAsStart Route[]   @relation("RouteStart")
  routesAsEnd   Route[]   @relation("RouteEnd")

  @@map("place_durations")
}

model Route {
  id              Int             @id @default(autoincrement())
  startingPointId Int             @map("starting_point_id")
  destinationId   Int             @map("destination_id")
  travelMode      String          // BICYCLING | DRIVING | TRANSIT | WALKING
  duration        Int
  distance        Int
  path            Json[]          @default([])
  isDeleted       Boolean         @default(false) @map("is_deleted")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  startingPoint   PlaceDuration   @relation("RouteStart", fields: [startingPointId], references: [id])
  destination     PlaceDuration   @relation("RouteEnd", fields: [destinationId], references: [id])

  @@map("routes")
}